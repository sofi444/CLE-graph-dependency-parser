Create templates

Apply templates to training data (fill in with all possibilities)
    => Create feature map:
        one per file (training data)
        e.g. index 0: hform is 'hello'
                    1: hpos is NN
                    ...
input: train file
output: dict (feature map)

Create feature vectors of samples in dev/test set
Give values 0/1 for each feature
input: sentence from dev/test + feature map
output: feature vector


+ distance and direction of ROOT
+ direction: right/left or R/L or else?
    - doesn't matter
+ comma in between elements of feature?
    - doesn't matter


TO DO:
+ add features with words in between head and dep
    - DONE
+ add other features not in paper
    - DONE
+ correct distance? if two tokens are next to each other, is the distance 1 or 0? (now 1)
    - DONE: doesn't matter as long as it's consistent.
+ between: add _NULL_ to indicate there is no word in between (i.e. empty)
    - DONE: _NONE_
+ which feature corresponds to which template?
    - DONE (T#:attr1,attr2,...,direction,distance)
+ between: repeating pos
    no new feature is added because it already exists in feature map
    but how are multiple tokens represented?
    ADJ(head) NN NN VBZ(dep)
    T52:ADJ,NN,VBZ
+ if token_id is 1, should token-1 be _ROOT_ or <BOS>?
    ROOT only visually at the beginning of the sentence
+ skip first iteration (token_idx == 0) ?
    features of the ROOT arc will be added when we encounter the dependent (head of sentence)
+ how to extract features from instances
+ instance class


Very sparse:
+ if distance > 10 just have feature that says 10+ - DONE
    + change to 5+?
+ use lemma features?
+ keep lemma and don't use form?



e.g.
ROOT x1 x2
Arcs: ROOT->x2, x2->x1

at token_id == 0:
    dform = ROOT
    hform = _NULL_
    dir = _NULL_
    dist = _NULL_

at token_id == 1:
    dform = x1
    hform = x2
    dir = left
    dist = 1

at token_id == 2:
    dform = x2
    hform = ROOT
    dir = right
    dist = 2 
    # the root arc